
blueprint:
  name: Myenergi Zappi unlock
  description: >
    Unlock Zappi after EV has been connected.

    Config:
      shell_command:
        myenergi_curl_get: 'curl --digest -u {{ url }}'
  domain: automation
  source_url: "https://github.com/Tw1nh34d/ha_zappi_unlock/blob/main/myenergi_wallbox_unlock.yaml"
  input:
    hubsn:
      name: Hub Serial
      default: ''
    apikey:
      name: API Key
      default: ''
    zappisn:
      name: Zappi Serial
      default: ''
    server:
      name: Myenergi Server
      default: 's18.myenergi.net'
    trigger_entities:
      name: Trigger
      selector:
        entity:
          multiple: true
          filter:
            domain: sensor
      default: ''
    conditions_entities:
       name: Condition
       selector:
         entity:
           multiple: true
           filter:
             domain: device_tracker
       default: ''
    curl_command_service:
      name: CURL command service
      selector:
        text:
      default: ''
    delay:
      name: Delay after publishing results
      selector:
        number:
          min: 0
          max: 10800
          step: 1
          unit_of_measurement: seconds
      default: 10

mode: single
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input trigger_entities
    to: "EV Connected"

conditions:
  - condition: state
    entity_id: !input conditions_entities
    state: "home"
       minutes: "{{ states('input_number.lock_min')|int }}"
       seconds: "{{ states('input_number.lock_sec')|int }}"


variables:
  hubsn: !input hubsn
  apikey: !input apikey
  zappisn: !input zappisn
  delay: !input delay

action:
  - alias: "Check if hubsn and apikey exist"
    if: >
      {{      hubsn != ''
          and apikey != ''
      }}
    then:
      - service: !input curl_command_service
        data:
          url: "{{ hubsn }}:{{ apikey }} -H 'accept: application/json' -H 'content-type: application/json'  --compressed 'https://{{ server }}/cgi-jlock-{{ zappisn}}-00000010'"
  - alias: "Wait to prevent multiple uploads"
    delay:
      seconds: "{{ delay | int }}"
